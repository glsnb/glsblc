{"remainingRequest":"/Users/apple/github/glsnb/glsblc/glsblc/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/apple/github/glsnb/glsblc/glsblc/node_modules/form-generator-iview/src/fieldGenerator.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/apple/github/glsnb/glsblc/glsblc/node_modules/form-generator-iview/src/fieldGenerator.vue","mtime":1576581289804},{"path":"/Users/apple/github/glsnb/glsblc/glsblc/node_modules/cache-loader/dist/cjs.js","mtime":1576575745336},{"path":"/Users/apple/github/glsnb/glsblc/glsblc/node_modules/babel-loader/lib/index.js","mtime":1575878134225},{"path":"/Users/apple/github/glsnb/glsblc/glsblc/node_modules/cache-loader/dist/cjs.js","mtime":1576575745336},{"path":"/Users/apple/github/glsnb/glsblc/glsblc/node_modules/vue-loader/lib/index.js","mtime":1576575752870}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBmaWVsZENvbXBvbmVudHMgZnJvbSAnLi91dGlscy9maWVsZHNMb2FkZXIuanMnOwppbXBvcnQge2NsYXNzUHJpZml4fSBmcm9tICcuL3V0aWxzL2NvbnN0JzsKaW1wb3J0IHtnZXRWYWxpZFR5cGV9IGZyb20gJy4vdXRpbHMvZ2V0VmFsaWRUeXBlJzsKaW1wb3J0IHNjaGVtYSBmcm9tICdhc3luYy12YWxpZGF0b3InOwpjb25zdCBub3RGb3JtZmllbGRzID0gWydEaXZpZGVyJ107CmV4cG9ydCBkZWZhdWx0IHsKICAgIGluamVjdDogWydmb3JtJ10sCiAgICBuYW1lOiAnRmllbGRHZW5lcmF0b3InLAogICAgY29tcG9uZW50czogewogICAgICAgIC4uLmZpZWxkQ29tcG9uZW50cwogICAgfSwKICAgIC8vIGZpbHRlcnM6IHsKICAgIC8vICAgICBpdGVtU3R5bGUoaXRlbVdpZHRoLCBmaWVsZCkgewogICAgLy8gICAgICAgICBjb25zdCB3aWR0aCA9IGZpZWxkLndpZHRoIHx8IGl0ZW1XaWR0aDsKICAgIC8vICAgICAgICAgcmV0dXJuIHsKICAgIC8vICAgICAgICAgICAgIHdpZHRoOiAnMTYwcHgnLAogICAgLy8gICAgICAgICAgICAgZGlzcGxheToKICAgIC8vICAgICAgICAgICAgIC8vIHdpZHRoOiB0eXBlb2Ygd2lkdGggIT09ICdudW1iZXInID8gd2lkdGggKyAncHgnIDogd2lkdGgKICAgIC8vICAgICAgICAgfTsKICAgIC8vICAgICB9CiAgICAvLyB9LAogICAgcHJvcHM6IHsKICAgICAgICByZXF1ZXN0SW50ZXJjZXB0b3I6IHsKICAgICAgICAgICAgdHlwZTogW0Z1bmN0aW9uLCBudWxsXSwKICAgICAgICAgICAgZGVmYXVsdDogbnVsbAogICAgICAgIH0sCiAgICAgICAgZmllbGQ6IHsKICAgICAgICAgICAgdHlwZTogT2JqZWN0LAogICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgICAgZGVmYXVsdCgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBbXTsKICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgc2l6ZTogewogICAgICAgICAgICB0eXBlOiBTdHJpbmcsCiAgICAgICAgICAgIGRlZmF1bHQoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gJ2RlZmF1bHQnOwogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBpbmxpbmU6IHsKICAgICAgICAgICAgdHlwZTogQm9vbGVhbiwKICAgICAgICAgICAgZGVmYXVsdDogZmFsc2UKICAgICAgICB9LAogICAgICAgIGFwaUJhc2U6IHsKICAgICAgICAgICAgdHlwZTogU3RyaW5nLAogICAgICAgICAgICBkZWZhdWx0OiAnJwogICAgICAgIH0sCiAgICAgICAgaXRlbVdpZHRoOiB7CiAgICAgICAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sCiAgICAgICAgICAgIGRlZmF1bHQ6ICcnCiAgICAgICAgfQogICAgfSwKICAgIGNvbXB1dGVkOiB7CiAgICAgICAgY2xhc3NlcygpIHsKICAgICAgICAgICAgcmV0dXJuIGAke2NsYXNzUHJpZml4fS0ke3RoaXMuZmllbGQudHlwZS50b0xvd2VyQ2FzZSgpfWA7CiAgICAgICAgfSwKICAgICAgICBpdGVtQ2xhc3NlcygpIHsKICAgICAgICAgICAgcmV0dXJuIGAke2NsYXNzUHJpZml4fS1mb3JtLWl0ZW1gOwogICAgICAgIH0sCiAgICAgICAgbm90Rm9ybWZpZWxkKCkgewogICAgICAgICAgICByZXR1cm4gbm90Rm9ybWZpZWxkcy5pbmNsdWRlcyh0aGlzLmZpZWxkLnR5cGUpOwogICAgICAgIH0sCiAgICAgICAgaXRlbVN0eWxlKCkgewogICAgICAgICAgICBjb25zdCBpbmxpbmUgPSB0aGlzLmZpZWxkLmlubGluZSB8fCB0aGlzLmlubGluZTsKICAgICAgICAgICAgY29uc3QgaXRlbVdpZHRoID0gaW5saW5lID8gdGhpcy5pdGVtV2lkdGggOiAodGhpcy5pdGVtV2lkdGggfHwgJzEwMCUnKTsKICAgICAgICAgICAgbGV0IHdpZHRoID0gdGhpcy5maWVsZC53aWR0aCB8fCBpdGVtV2lkdGg7CiAgICAgICAgICAgIC8vIOWFvOWuueiAgeeJiOacrOeahOWtl+espuS4suaVsOWAvO+8jOWmguaenOaYr+aVsOWAvOWtl+espuS4su+8jOWImei9rOS4umludAogICAgICAgICAgICBpZiAodHlwZW9mIHdpZHRoID09PSAnc3RyaW5nJyAmJiAvXlxkKyQvLnRlc3Qod2lkdGgpKSB7CiAgICAgICAgICAgICAgICB3aWR0aCA9IHBhcnNlSW50KHdpZHRoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgd2lkdGg6IHR5cGVvZiB3aWR0aCA9PT0gJ3N0cmluZycgPyB3aWR0aCA6IHdpZHRoICsgJ3B4JywKICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZSA/ICdpbmxpbmUtYmxvY2snIDogJ2Jsb2NrJwogICAgICAgICAgICAgICAgLy8gd2lkdGg6IHR5cGVvZiB3aWR0aCAhPT0gJ251bWJlcicgPyB3aWR0aCArICdweCcgOiB3aWR0aAogICAgICAgICAgICB9OwogICAgICAgIH0sCiAgICAgICAgc2hvdygpIHsKICAgICAgICAgICAgY29uc3QgZmllbGQgPSB0aGlzLmZpZWxkOwogICAgICAgICAgICBjb25zdCBtb2RlbCA9IHRoaXMuZm9ybS5tb2RlbDsKICAgICAgICAgICAgbGV0IHNob3cgPSB0cnVlOwogICAgICAgICAgICBpZiAoZmllbGQuaGlkZGVuT24pIHsKICAgICAgICAgICAgICAgIGxldCBkZXNjcmlwdG9yID0gZmllbGQuaGlkZGVuT247CiAgICAgICAgICAgICAgICBsZXQgdmFsaWRhdG9yID0gbmV3IHNjaGVtYShkZXNjcmlwdG9yKTsKICAgICAgICAgICAgICAgIHZhbGlkYXRvci52YWxpZGF0ZShtb2RlbCwgKGVycm9ycykgPT4gewogICAgICAgICAgICAgICAgICAgIGlmKCFlcnJvcnMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2hvdyA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChmaWVsZC5zaG93T24pIHsKICAgICAgICAgICAgICAgIGxldCBkZXNjcmlwdG9yID0gZmllbGQuc2hvd09uOwogICAgICAgICAgICAgICAgbGV0IHZhbGlkYXRvciA9IG5ldyBzY2hlbWEoZGVzY3JpcHRvcik7CiAgICAgICAgICAgICAgICB2YWxpZGF0b3IudmFsaWRhdGUobW9kZWwsIChlcnJvcnMpID0+IHsKICAgICAgICAgICAgICAgICAgICBpZihlcnJvcnMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2hvdyA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGZpZWxkLm1vZGVsLCB2YWxpZCwgbW9kZWwpOwogICAgICAgICAgICByZXR1cm4gc2hvdzsKICAgICAgICB9CiAgICB9LAogICAgY3JlYXRlZCgpIHsKICAgICAgICBsZXQgZmllbGQgPSB0aGlzLmZpZWxkOwogICAgICAgIC8vIOiAgeeJiOacrOWFvOWuuQogICAgICAgIGlmIChmaWVsZC5zdWJUeXBlKSB7CiAgICAgICAgICAgIGZpZWxkLnN1YnR5cGUgPSBmaWVsZC5zdWJUeXBlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZmllbGQ7CiAgICB9LAogICAgbWV0aG9kczogewogICAgICAgIGhhbmRsZUZpZWxkQ2hhbmdlKG1vZGVsLCB2YWx1ZSkgewogICAgICAgICAgICB0aGlzLiRlbWl0KCdvbi1maWVsZC1jaGFuZ2UnLCBtb2RlbCwgdmFsdWUpOwogICAgICAgIH0sCiAgICAgICAgaGFuZGxlU3VibWl0Q2xpY2soKSB7CiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ29uLXN1Ym1pdCcpOwogICAgICAgIH0sCiAgICAgICAgaGFuZGxlUmVzZXRDbGljaygpIHsKICAgICAgICAgICAgdGhpcy4kZW1pdCgnb24tcmVzZXQnKTsKICAgICAgICB9LAogICAgICAgIGhhbmRsZUJ1dHRvbkNsaWNrKCRldmVudCkgewogICAgICAgICAgICB0aGlzLiRlbWl0KCdvbi1idXR0b24tZXZlbnQnLCAkZXZlbnQpOwogICAgICAgIH0sCiAgICAgICAgZ2V0RmllbGRDb20oY29tVHlwZSA9ICcnKSB7CiAgICAgICAgICAgIHJldHVybiBgZmllbGQke2NvbVR5cGV9YDsKICAgICAgICB9LAogICAgICAgIGhhbmRsZVN1Ym1pdCgpIHsKICAgICAgICAgICAgdGhpcy4kZW1pdCgnb24tc3VibWl0Jyk7CiAgICAgICAgfSwKICAgICAgICBnZXRSdWxlcyhmaWVsZCkgewogICAgICAgICAgICBjb25zdCB0eXBlID0gZmllbGQudHlwZS50b0xvd2VyQ2FzZSgpOwogICAgICAgICAgICBjb25zdCBzdWJ0eXBlID0gZmllbGQuc3VidHlwZTsKICAgICAgICAgICAgbGV0IHJ1bGVzID0gW107CiAgICAgICAgICAgIGlmIChmaWVsZC5yZXF1aXJlZCkgewogICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdkYXRlcGlja2VyJyAmJiBbJ2RhdGVyYW5nZScsICdkYXRldGltZXJhbmdlJ10uaW5jbHVkZXMoc3VidHlwZSkpIHsKICAgICAgICAgICAgICAgICAgICBydWxlcy5wdXNoKHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yKHJ1bGUsIHZhbHVlLCBjYWxsYmFjaykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMiAmJiB2YWx1ZVswXSAmJiB2YWx1ZVsxXSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhuZXcgRXJyb3IoZmllbGQubGFiZWwgKyAn5LiN5Y+v5Li656m6JykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdsb2dpY2lucHV0JykgewogICAgICAgICAgICAgICAgICAgIHJ1bGVzLnB1c2goewogICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3IocnVsZSwgdmFsdWUsIGNhbGxiYWNrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUubG9naWMgJiYgdmFsdWUudmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaygpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobmV3IEVycm9yKGZpZWxkLmxhYmVsICsgJ+S4jeWPr+S4uuepuicpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcjogJ2NoYW5nZScKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJ1bGVzLnB1c2goewogICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgICAgICAgICAgICAgIHR5cGU6IGdldFZhbGlkVHlwZShmaWVsZCksCiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogKGZpZWxkLmxhYmVsIHx8IGZpZWxkLm1vZGVsKSArICfkuI3lj6/kuLrnqbonLAogICAgICAgICAgICAgICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoZmllbGQucnVsZXMpIHsKICAgICAgICAgICAgICAgIHJ1bGVzID0gcnVsZXMuY29uY2F0KGZpZWxkLnJ1bGVzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcnVsZXM7CiAgICAgICAgfSwKICAgIH0KfTsK"},{"version":3,"sources":["fieldGenerator.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"fieldGenerator.vue","sourceRoot":"node_modules/form-generator-iview/src","sourcesContent":["<template>\n    <div\n        v-if=\"notFormfield && show\"\n        :class=\"itemClasses\"\n        :style=\"itemStyle\"\n    >\n        <component\n            :is=\"getFieldCom(field.type)\"\n            :class=\"classes\"\n            :field=\"field\"\n            :inline=\"inline\"\n            :size=\"field.size || size\"\n        />\n    </div>\n    <FormItem\n        v-else-if=\"show\"\n        :label=\"field.label\"\n        :prop=\"field.model\"\n        :required=\"field.required\"\n        :rules=\"getRules(field)\"\n        :label-width=\"field.labelWidth\"\n        :class=\"itemClasses\"\n        :style=\"itemStyle\"\n    >\n        <component\n            :is=\"getFieldCom(field.type)\"\n            :class=\"classes\"\n            :field=\"field\"\n            :inline=\"inline\"\n            :api-base=\"apiBase\"\n            :size=\"field.size || size\"\n            :request-interceptor=\"requestInterceptor\"\n            @on-change=\"handleFieldChange\"\n            @on-submit-click=\"handleSubmitClick\"\n            @on-reset-click=\"handleResetClick\"\n            @on-button-click=\"handleButtonClick\"\n            @submit=\"handleSubmit\"\n        />\n    </FormItem>\n</template>\n<script>\nimport fieldComponents from './utils/fieldsLoader.js';\nimport {classPrifix} from './utils/const';\nimport {getValidType} from './utils/getValidType';\nimport schema from 'async-validator';\nconst notFormfields = ['Divider'];\nexport default {\n    inject: ['form'],\n    name: 'FieldGenerator',\n    components: {\n        ...fieldComponents\n    },\n    // filters: {\n    //     itemStyle(itemWidth, field) {\n    //         const width = field.width || itemWidth;\n    //         return {\n    //             width: '160px',\n    //             display:\n    //             // width: typeof width !== 'number' ? width + 'px' : width\n    //         };\n    //     }\n    // },\n    props: {\n        requestInterceptor: {\n            type: [Function, null],\n            default: null\n        },\n        field: {\n            type: Object,\n            required: true,\n            default() {\n                return [];\n            }\n        },\n        size: {\n            type: String,\n            default() {\n                return 'default';\n            }\n        },\n        inline: {\n            type: Boolean,\n            default: false\n        },\n        apiBase: {\n            type: String,\n            default: ''\n        },\n        itemWidth: {\n            type: [String, Number],\n            default: ''\n        }\n    },\n    computed: {\n        classes() {\n            return `${classPrifix}-${this.field.type.toLowerCase()}`;\n        },\n        itemClasses() {\n            return `${classPrifix}-form-item`;\n        },\n        notFormfield() {\n            return notFormfields.includes(this.field.type);\n        },\n        itemStyle() {\n            const inline = this.field.inline || this.inline;\n            const itemWidth = inline ? this.itemWidth : (this.itemWidth || '100%');\n            let width = this.field.width || itemWidth;\n            // 兼容老版本的字符串数值，如果是数值字符串，则转为int\n            if (typeof width === 'string' && /^\\d+$/.test(width)) {\n                width = parseInt(width);\n            }\n            return {\n                width: typeof width === 'string' ? width : width + 'px',\n                display: inline ? 'inline-block' : 'block'\n                // width: typeof width !== 'number' ? width + 'px' : width\n            };\n        },\n        show() {\n            const field = this.field;\n            const model = this.form.model;\n            let show = true;\n            if (field.hiddenOn) {\n                let descriptor = field.hiddenOn;\n                let validator = new schema(descriptor);\n                validator.validate(model, (errors) => {\n                    if(!errors) {\n                        show = false;\n                    }\n                });\n            }\n            if (field.showOn) {\n                let descriptor = field.showOn;\n                let validator = new schema(descriptor);\n                validator.validate(model, (errors) => {\n                    if(errors) {\n                        show = false;\n                    }\n                });\n            }\n            // console.log(field.model, valid, model);\n            return show;\n        }\n    },\n    created() {\n        let field = this.field;\n        // 老版本兼容\n        if (field.subType) {\n            field.subtype = field.subType;\n        }\n        return field;\n    },\n    methods: {\n        handleFieldChange(model, value) {\n            this.$emit('on-field-change', model, value);\n        },\n        handleSubmitClick() {\n            this.$emit('on-submit');\n        },\n        handleResetClick() {\n            this.$emit('on-reset');\n        },\n        handleButtonClick($event) {\n            this.$emit('on-button-event', $event);\n        },\n        getFieldCom(comType = '') {\n            return `field${comType}`;\n        },\n        handleSubmit() {\n            this.$emit('on-submit');\n        },\n        getRules(field) {\n            const type = field.type.toLowerCase();\n            const subtype = field.subtype;\n            let rules = [];\n            if (field.required) {\n                if (type === 'datepicker' && ['daterange', 'datetimerange'].includes(subtype)) {\n                    rules.push({\n                        validator(rule, value, callback) {\n                            if (value.length === 2 && value[0] && value[1]) {\n                                callback();\n                            }\n                            else {\n                                callback(new Error(field.label + '不可为空'));\n                            }\n                        },\n                        trigger: 'change'\n                    });\n                }\n                if (type === 'logicinput') {\n                    rules.push({\n                        validator(rule, value, callback) {\n                            if (value.logic && value.value) {\n                                callback();\n                            }\n                            else {\n                                callback(new Error(field.label + '不可为空'));\n                            }\n                        },\n                        trigger: 'change'\n                    });\n                }\n                rules.push({\n                    required: true,\n                    type: getValidType(field),\n                    message: (field.label || field.model) + '不可为空',\n                    trigger: 'change'\n                });\n            }\n            if (field.rules) {\n                rules = rules.concat(field.rules);\n            }\n            return rules;\n        },\n    }\n};\n</script>\n"]}]}